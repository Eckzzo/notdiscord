"""Exposes a URL that specifies the behavior of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behavior of this scalar."""
  url: String!
) on SCALAR

"""A channel where messages are located"""
type Channel implements Node {
  """The ID of an object"""
  id: ID!
  name: String
  description: String
  messages(after: String, first: Int, before: String, last: Int): MessageConnection

  """mongoose _id"""
  _id: String!
}

"""A connection to a list of items."""
type ChannelConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ChannelEdge]!
}

"""An edge in a connection."""
type ChannelEdge {
  """The item at the end of the edge."""
  node: Channel

  """A cursor for use in pagination."""
  cursor: String!
}

"""A connection to a list of items."""
interface Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!
}

"""
An object containing an error message and the field the error belongs to
"""
type FieldError {
  field: String
  message: String
}

"""The friendship status between two users"""
type Friendship {
  """The ID of an object"""
  id: ID!

  """The user that sent this friendship"""
  sender: User!

  """The user that is the recipient of this friendship"""
  recipient: User!

  """The status that this friendship is"""
  status: Int!

  """mongoose _id"""
  _id: String!
}

input FriendshipAcceptInput {
  friendship: ID!
  clientMutationId: String
}

type FriendshipAcceptPayload {
  friendshipEdge: FriendshipEdge

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input FriendshipCancelInput {
  friendship: ID!
  clientMutationId: String
}

type FriendshipCancelPayload {
  deletedNode: Friendship

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

"""A connection to a list of items."""
type FriendshipConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FriendshipEdge]!
}

input FriendshipDeleteInput {
  friendship: ID!
  clientMutationId: String
}

type FriendshipDeletePayload {
  deletedNode: Friendship

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

"""An edge in a connection."""
type FriendshipEdge {
  """The item at the end of the edge."""
  node: Friendship

  """A cursor for use in pagination."""
  cursor: String!
}

input FriendshipRejectInput {
  friendship: ID!
  clientMutationId: String
}

type FriendshipRejectPayload {
  id: ID

  """Default error field resolver."""
  error: String

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input FriendshipSendInput {
  username: String!
  clientMutationId: String
}

type FriendshipSendPayload {
  friendshipEdge: FriendshipEdge

  """Default success field resolver."""
  success: String
  error: FieldError
  clientMutationId: String
}

"""Status of the friendship"""
enum FriendshipStatus {
  PENDING
  ACCEPTED
}

"""The target of friendship"""
enum FriendshipTarget {
  SENDER
  RECIPIENT
}

"""A guild, kinda like a discord server"""
type Guild implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String!
  description: String!
  passcode: String!

  """The guild owner"""
  owner: User!
  amIOwner: Boolean!

  """The guilds channels"""
  channels(after: String, first: Int, before: String, last: Int): ChannelConnection!

  """The guild members"""
  members(after: String, first: Int, before: String, last: Int): UserConnection!
}

input GuildAddChannelInput {
  guildId: String!
  name: String!
  description: String!
  clientMutationId: String
}

type GuildAddChannelPayload {
  newChannelEdge: ChannelEdge

  """Default success field resolver."""
  success: String
  error: FieldError
  clientMutationId: String
}

"""A connection to a list of items."""
type GuildConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GuildEdge]!
}

input GuildCreateInput {
  name: String!
  description: String!
  clientMutationId: String
}

type GuildCreatePayload {
  newGuildEdge: GuildEdge

  """Default success field resolver."""
  success: String
  error: FieldError
  clientMutationId: String
}

"""An edge in a connection."""
type GuildEdge {
  """The item at the end of the edge."""
  node: Guild

  """A cursor for use in pagination."""
  cursor: String!
}

input GuilDeleteInput {
  id: String!
  clientMutationId: String
}

type GuilDeletePayload {
  deletedEdge: GuildEdge
  clientMutationId: String
}

input GuildJoinInput {
  passcode: String!
  clientMutationId: String
}

type GuildJoinPayload {
  joinedGuildEdge: GuildEdge

  """Default success field resolver."""
  success: String
  error: FieldError
  clientMutationId: String
}

input GuildLeaveInput {
  id: String!
  clientMutationId: String
}

type GuildLeavePayload {
  exitedGuildEdge: GuildEdge
  clientMutationId: String
}

"""A NotDiscord Message"""
type Message implements Node {
  """The ID of an object"""
  id: ID!
  content: String!
  sender: User!
  location: Channel!

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type MessageConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MessageEdge]!
}

input MessageCreateInput {
  content: String!
  location: String!
  clientMutationId: String
}

type MessageCreatePayload {
  newMessageEdge: MessageEdge
  clientMutationId: String
}

"""An edge in a connection."""
type MessageEdge {
  """The item at the end of the edge."""
  node: Message

  """A cursor for use in pagination."""
  cursor: String!
}

input MessageNewInput {
  location: String!
  clientSubscriptionId: String
}

type MessageNewPayload {
  message: MessageEdge
  clientSubscriptionId: String
}

type Mutation {
  UserSignInMutation(input: UserSignInMutationInput!): UserSignInMutationPayload
  UserSignUpMutation(input: UserSignUpMutationInput!): UserSignUpMutationPayload
  GuildJoinMutation(input: GuildJoinInput!): GuildJoinPayload
  GuildLeaveMutation(input: GuildLeaveInput!): GuildLeavePayload
  GuildDeleteMutation(input: GuilDeleteInput!): GuilDeletePayload
  GuildCreateMutation(input: GuildCreateInput!): GuildCreatePayload
  GuildAddChannelMutation(input: GuildAddChannelInput!): GuildAddChannelPayload

  """Create a NotDiscord Message"""
  MessageCreateMutation(input: MessageCreateInput!): MessageCreatePayload
  FriendshipSendMutation(input: FriendshipSendInput!): FriendshipSendPayload
  FriendshipAcceptMutation(input: FriendshipAcceptInput!): FriendshipAcceptPayload
  FriendshipCancelMutation(input: FriendshipCancelInput!): FriendshipCancelPayload
  FriendshipDeleteMutation(input: FriendshipDeleteInput!): FriendshipDeletePayload
  FriendshipRejectMutation(input: FriendshipRejectInput!): FriendshipRejectPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

"""Queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node

  """Fetches objects given their IDs"""
  nodes(
    """The IDs of objects"""
    ids: [ID!]!
  ): [Node]!
  me: User
  friendships(status: FriendshipStatus!, target: FriendshipTarget!, after: String, first: Int, before: String, last: Int): FriendshipConnection!
  guild(id: String!): Guild
  channel(id: String!): Channel
}

type Subscription {
  MessageNewSubscription(input: MessageNewInput!): MessageNewPayload
}

"""NotDiscord user"""
type User {
  """The ID of an object"""
  id: ID!
  username: String!
  email: String
  denominator: String!

  """The user avatar hash"""
  avatar: String!

  """The guilds the user belongs to"""
  guilds(after: String, first: Int, before: String, last: Int): GuildConnection!
  isFriend: Boolean!

  """mongoose _id"""
  _id: String!
  createdAt: String
  updatedAt: String
}

"""A connection to a list of items."""
type UserConnection implements Connection {
  """Number of items in this connection."""
  count: Int

  """
  A count of the total number of objects in this connection, ignoring pagination.
  This allows a client to fetch the first five objects by passing "5" as the
  argument to "first", then fetch the total count so it could display "5 of 83",
  for example.
  """
  totalCount: Int

  """Offset from start."""
  startCursorOffset: Int!

  """Offset till end."""
  endCursorOffset: Int!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User

  """A cursor for use in pagination."""
  cursor: String!
}

input UserSignInMutationInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignInMutationPayload {
  me: User
  error: FieldError

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

input UserSignUpMutationInput {
  username: String!
  email: String!
  password: String!
  clientMutationId: String
}

type UserSignUpMutationPayload {
  me: User
  token: String
  error: FieldError

  """Default success field resolver."""
  success: String
  clientMutationId: String
}

